@use "../abstracts" as *;
// Icons

// Add an icon using background-image.
// Mainly for using icons with elements that cannot contain other
// elements, like input.
@mixin icon-bg-center($icon-url) {
  // TODO
  background-image: $icon-url;
  background-size: 0.80em auto;
  background-repeat: no-repeat;
  background-position: center;

}

@mixin icon-bg-right($icon-url) {
  background-image: $icon-url;
  background-size: 0.80em auto;
  background-repeat: no-repeat;
  background-position: center right .75rem;
}

// Should be used most of the time.
// icon-name: Google fonts icon name
// fill: int {0,1}
@mixin icon-inline($icon-name,
  $fill: $icon-fill,
  $wght: $icon-wght,
  $grad: $icon-grad,
  $opsz: $icon-opsz,
) {

  content: $icon-name;
  font-family: $icon-font-family;
  font-variation-settings:
    'FILL' 0,
    'wght'$wght,
    'GRAD'$grad,
    'opsz'$opsz;
  height: $icon-font-size;
  width: $icon-font-size;
  font-size: inherit;
  font-style: normal;
  display: inline-block;
  line-height: $icon-font-size;
  text-transform: none;
  letter-spacing: normal;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;
  text-decoration: none;
  vertical-align: center;
  text-align: center;
  border-radius: $global-border-radius;
  border: $icon-border;
  background-color: $icon-background;
  color: $icon-color;
}


// Icons - only allow one at a time
// Icons use ::before to leave ::after open for the state layer
[data-icon]::before {
  @include icon-inline(attr(data-icon));
}


[data-icon] {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;

  &[data-placement="right"] {
    flex-direction: row-reverse;
    justify-content: flex-end;
  }

  &[data-placement="left"] {
    flex-direction: row;
    justify-content: flex-end;
  }

  &::before {
    top: 0;
  }

  &:not([data-placement="right"])[data-icon]::before,
  &[data-placement="left"]::before {
    left: 0;
  }

  &[data-placement="right"]::before {
    right: 0;
  }

  &[data-placement="top"] {
    flex-direction: column;
  }

  &[data-placement="bottom"] {
    flex-direction: column-reverse;
  }
}

:not(button, summary)[data-icon] {

  &:not([data-placement="right"])::before,
  &[data-placement="left"]::before {
    padding-right: $icon-inline-padding;
  }

  &[data-placement="right"]::before {
    padding-left: $icon-inline-padding;
  }

  &[data-placement="top"]::before,
  &[data-placement="bottom"]::before {
    padding: 0;
  }
}

// Icon Padding
button[data-icon] {

  &::before {
    padding: $icon-padding;
  }

  &:not([data-placement="right"]),
  &[data-placement="left"] {
    padding-left: 0;
  }

  &[data-placement="right"] {
    padding-right: 0;
  }
}

:not(button, li)[data-icon] {
  padding: 0;
}
