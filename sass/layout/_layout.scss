// Semantic Containers
@use "../abstracts" as *;

body {
  display: grid;
  grid-template-rows: auto 1fr auto;
  grid-template-columns: $menu-width 1fr $sidebar-width;
  min-height: 100vh;

  // one asside
  &:has(aside) {
    grid-template-areas:
      "header header header"
      "menu main main"
      "menu footer footer";
  }

  // two asside
  &:has(aside + aside) {
    grid-template-areas:
      "header header header"
      "menu main sidebar"
      "menu footer footer";
  }

  // no asside
  &:not(:has(aside)) {
    grid-template-areas:
      "header header header"
      "main main main"
      "footer footer footer";
  }

  >header {
    grid-area: header;
    z-index: 100;
  }

  >main {
    grid-area: main;
  }

  >footer {
    grid-area: footer;
  }


  >aside {
    grid-area: menu;
    width: $menu-width;

    +aside {
      grid-area: sidebar;

      details {
        margin-left: 0;
      }
    }
  }
}

@if $sticky-sidebar==true {
  body>aside nav {
    position: sticky;
    top: 0;
    overflow: auto;
    overflow-x: hidden;
    max-height: 100vh;
  }
}

@if $sticky-header ==true {
  body>header {
    position: sticky;
    top: 0;
  }

  @if $sticky-sidebar==true {
    body>aside nav {
      top: $sidebar-y-offset;
    }
  }

}

// Media Queries 
@media screen and (max-width: breakpoint(lg)) {

  body {

    // two asside
    &:has(aside + aside) {
      grid-template-areas:
        "header header header"
        "menu main main"
        "footer footer footer";

      >aside+aside {
        display: none;
      }
    }

  }
}

@media screen and (max-width: breakpoint(md)) {
  body {

    // at least one asside
    &:has(aside + aside),
    &:has(aside) {
      grid-template-areas:
        "header header header"
        "main main main"
        "footer footer footer";

      >aside {
        display: none;
      }
    }
  }

}
